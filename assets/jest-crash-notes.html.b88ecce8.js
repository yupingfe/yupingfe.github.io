import{_ as t,o as p,c as o,b as n,a as c,d as s,e,r as u}from"./app.aa0b1638.js";const l={},k=n("h1",{id:"jest\u7684\u57FA\u7840\u4F7F\u7528",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jest\u7684\u57FA\u7840\u4F7F\u7528","aria-hidden":"true"},"#"),s(" JEST\u7684\u57FA\u7840\u4F7F\u7528")],-1),i={href:"https://jestjs.io/zh-Hans/",target:"_blank",rel:"noopener noreferrer"},r=s("Jestjs"),d=s(" \u662F\u4E00\u6B3E\u4F18\u96C5\u3001\u7B80\u6D01\u7684 JavaScript \u6D4B\u8BD5\u6846\u67B6\u3002"),f=e(`<p>\u5B89\u88C5<code>npm install jest -D</code></p><h2 id="\u57FA\u7840\u7528\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u57FA\u7840\u7528\u6CD5" aria-hidden="true">#</a> \u57FA\u7840\u7528\u6CD5</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// func.js</span>
<span class="token keyword">const</span> func <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num1 <span class="token operator">+</span> num2
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> func
</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// func.test.js</span>
<span class="token keyword">const</span> func <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./func&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// tobe macher</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;add 2 + 2 equal 4&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// .not \u4FEE\u9970\u7B26\u5141\u8BB8\u4F60\u6D4B\u8BD5\u7ED3\u679C\u4E0D\u7B49\u4E8E\u67D0\u4E2A\u503C\u7684\u60C5\u51B5</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;add 2 + 2 equal NOT 5&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>\u68C0\u67E5\u4E00\u4E9B\u7279\u6B8A\u7684\u503C\uFF08null\uFF0Cundefined \u548C boolean\uFF09</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;should be null&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// toBeNull \u4EC5\u5339\u914D null</span>
<span class="token comment">// toBeUndefined \u4EC5\u5339\u914D undefined</span>
<span class="token comment">// toBeDefined \u4E0E\u2026\u76F8\u53CD toBeUndefined</span>
<span class="token comment">// toBeTruthy \u5339\u914D if \u8BED\u53E5\u89C6\u4E3A true \u7684\u4EFB\u4F55\u5185\u5BB9</span>
<span class="token comment">// toBeFalsy \u5339\u914D if \u8BED\u53E5\u89C6\u4E3A false \u7684\u4EFB\u4F55\u5185\u5BB9</span>

</code></pre></div><p>\u26A0\uFE0F\u6CE8\u610F <code>toBe</code>\u7528\u4E8E\u57FA\u672C\u6570\u636E\u7C7B\u578B\u7684\u5339\u914D\uFF0C\u4E0D\u80FD\u7528\u6765\u5339\u914D\u5F15\u7528\u7C7B\u578B\u5982\u6570\u7EC4\u548C\u5BF9\u8C61</p><p>\u4F7F\u7528<code>toEqual</code>\u6765\u8FDB\u884C\u5339\u914D</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// func.js</span>
<span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">&#39;ZHANGSAN&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> func

</code></pre></div><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// func.test.js</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;User should be ZHANGSAN&#39;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">&#39;ZHANGSAN&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>\u4F7F\u7528\u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;there is no I in Apple&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;team&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">I</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>\u5224\u65AD\u6570\u7EC4\u5F53\u4E2D\u662F\u5426\u5B58\u5728\u67D0\u9879</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;there is John in usernames&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  userNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Peter&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Greg&#39;</span><span class="token punctuation">]</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>userNames<span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>\u5904\u7406\u5F02\u6B65</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// working with async data</span>
<span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://xxx.com/getName&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// promise</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;User fetched usrname xxx&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u8FD9\u884C\u662F\u671F\u5F85\u65AD\u8A00\u7684\u6B21\u6570</span>
  expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> fetchData<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">usrName</span><span class="token operator">:</span> <span class="token string">&#39;ZHANGSAN&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// async/await</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;User fetched usrname xxx&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> fetchData
  <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">usrName</span><span class="token operator">:</span> <span class="token string">&#39;ZHANGSAN&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="\u94A9\u5B50\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u94A9\u5B50\u51FD\u6570" aria-hidden="true">#</a> \u94A9\u5B50\u51FD\u6570</h2><p>\u6211\u4EEC\u53EF\u4EE5\u5728\u6D4B\u8BD5\u5F00\u59CB\u4E4B\u524D\u548C\u7ED3\u675F\u4E4B\u540E\u4F7F\u7528\u4E00\u4E9B\u94A9\u5B50\u6765\u6267\u884C\u67D0\u4E9B\u64CD\u4F5C</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">testStart</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test Begin&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">testEnd</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test end&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// \u4F1A\u5728\u6BCF\u9879\u6D4B\u8BD5\u5F00\u59CB\u548C\u7ED3\u675F\u540E\u6267\u884C</span>
<span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">testStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">testEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// \u4F1A\u5728\u6240\u6709\u6D4B\u8BD5\u5F00\u59CB\u524D\u548C\u7ED3\u675F\u540E\u6267\u884C</span>
<span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">testStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">afterAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">testEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// \u6307\u5B9A\u5728\u67D0\u9879\u6D4B\u8BD5\u5F00\u59CB\u6216\u7ED3\u675F\u65F6\u6267\u884C</span>
<span class="token keyword">const</span> <span class="token parameter">foo</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo...&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// describe(name, fn) \u662F\u4E00\u4E2A\u5C06\u591A\u4E2A\u76F8\u5173\u7684\u6D4B\u8BD5\u7EC4\u5408\u5728\u4E00\u8D77\u7684\u5757\u3002</span>
<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;start foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;test foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>`,19);function g(m,h){const a=u("ExternalLinkIcon");return p(),o("div",null,[k,n("p",null,[n("a",i,[r,c(a)]),d]),f])}var x=t(l,[["render",g],["__file","jest-crash-notes.html.vue"]]);export{x as default};
