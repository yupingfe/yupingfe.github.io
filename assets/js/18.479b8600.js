(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{467:function(v,_,t){"use strict";t.r(_);var a=t(58),e=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"其他面试问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他面试问题"}},[v._v("#")]),v._v(" 其他面试问题")]),v._v(" "),t("ol",[t("li",[v._v("对你最熟悉的项目做一个讲解")]),v._v(" "),t("li",[v._v("linux操作")]),v._v(" "),t("li",[v._v("git常见命令\n"),t("ol",[t("li",[v._v("代码冲突怎么处理？")])])]),v._v(" "),t("li",[v._v("MVVM和jQuery的区别")]),v._v(" "),t("li",[v._v("MVC MVP MVVM的区别")]),v._v(" "),t("li",[v._v("SPA应用优缺点，性能优化")]),v._v(" "),t("li",[v._v("数据结构\n"),t("ol",[t("li",[v._v("栈和队列")])])]),v._v(" "),t("li",[v._v("canvas svg会不会")]),v._v(" "),t("li",[v._v("优化webpack打包")]),v._v(" "),t("li",[v._v("nodejs写爬虫cherrio")]),v._v(" "),t("li",[v._v("webpack怎么用？")]),v._v(" "),t("li",[v._v("git每个分支开发时请求的地址不同，怎么配置打包时让所有分支都能访问到数据？")]),v._v(" "),t("li",[v._v("ajax底层原理？\n"),t("ol",[t("li",[v._v("Axis ajax fetch 请求不同的地方")])])]),v._v(" "),t("li",[v._v("怎么判断有没有登录？（token）")]),v._v(" "),t("li",[v._v("Echarts")]),v._v(" "),t("li",[v._v("set数据类型？")])]),v._v(" "),t("h2",{attrs:{id:"什么叫优雅降级和渐进增强"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么叫优雅降级和渐进增强"}},[v._v("#")]),v._v(" 什么叫优雅降级和渐进增强？")]),v._v(" "),t("p",[v._v("progressive enhancement")]),v._v(" "),t("p",[v._v("graceful degradation")]),v._v(" "),t("p",[t("strong",[v._v("渐进增强")]),v._v(":针对低版本浏览器进行构建页面，保证最基本的功能，\n然后再针对高级浏览器进行效果、交互等改进和追加\n功能达到更好的用户体验\n"),t("strong",[v._v("优雅降级")]),v._v(":一开始就构建完整的功能，然后再针对低版本浏览器进行兼容")]),v._v(" "),t("h2",{attrs:{id:"如何提高页面加载速度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何提高页面加载速度"}},[v._v("#")]),v._v(" 如何提高页面加载速度？")]),v._v(" "),t("p",[v._v("1、加快文件下载速度，减小资源文件下载对页面解析的阻塞。页面加载过程首先会下载 HTML 文件，然后自上而下开始解析，解析过程中如果遇到外部资源则会开始下载，直至下载完成才会继续解析。所以，加快文件下载速度方式是有效的提升页面加载速度的方法。具体可以是")]),v._v(" "),t("p",[v._v("1）通过设置 CDN、HTTP 缓存等方式，减少 HTTP 传输时间；")]),v._v(" "),t("p",[v._v("2）对文件进行压缩，减小文件体积；")]),v._v(" "),t("p",[v._v("3）对 script、CSS 文件引用标签设置异步下载属性，避免对 HTML 文件解析产生阻塞")]),v._v(" "),t("p",[v._v("2、将样式写在 head 中，将 JS 代码或文件引用写在 body 的最后。")]),v._v(" "),t("p",[v._v("在 HTML 文件下载的过程中，会同步的对文件流进行解析成 DOM 结构，当遇到 CSS 代码时，会将其解析成 CSSOM 树；当遇到 JS 脚本时，会将其同步执行，并且阻塞继续解析，执行之后方才继续解析。最后，将 DOM 和 CSSOM 渲染至页面上。所以，将样式写在 head 中，可以尽早地构建 CSSOM 树；将 JS 代码写在 body 最后，不会对 DOM 解析造成阻塞，可以最快地完成页面地构建")]),v._v(" "),t("p",[v._v("3、尽可能地提升浏览器渲染速度。包括")]),v._v(" "),t("p",[v._v("1）避免出现冗余 HTML 标签，提升 DOM 结构地构建速度；")]),v._v(" "),t("p",[v._v("2）精简 CSS 样式及选择器（避免使用通配符*），提升 CSSOM 构建及匹配速度；")]),v._v(" "),t("p",[v._v("3）如果是单页面应用，则页面结构依赖 JS 的执行。可以优化 JS 代码，尽早输出首屏结构；或采用服务端渲染的方式，直接传输 HTML 结构，减少首屏时间")])])}),[],!1,null,null,null);_.default=e.exports}}]);