(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{365:function(t,s,a){"use strict";a.r(s);var n=a(45),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"css面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css面试题"}},[t._v("#")]),t._v(" CSS面试题")]),t._v(" "),a("h2",{attrs:{id:"link和-import的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#link和-import的区别"}},[t._v("#")]),t._v(" Link和@import的区别")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("link 是 HTML 标签，不仅可以加载 CSS 文件，还可以定义 RSS、rel 连接属性等；")]),t._v(" "),a("p",[t._v("@import 是 CSS 提供的语法，只有导入样式表的作用。")])]),t._v(" "),a("li",[a("p",[t._v("加载页面时，link 标签引入的 CSS 被同时加载；")]),t._v(" "),a("p",[t._v("@import 引入的 CSS 将在页面加载完毕后被加载。")])]),t._v(" "),a("li",[a("p",[t._v("@import 是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；")]),t._v(" "),a("p",[t._v("link 标签作为 HTML 元素，不存在兼容性问题。")])]),t._v(" "),a("li",[a("p",[t._v("可以通过 JS 操作 DOM ，插入 link 标签来改变样式；")]),t._v(" "),a("p",[t._v("由于 DOM 方法是基于文档的，无法使用@import 的方式插入样式。")])]),t._v(" "),a("li",[a("p",[t._v("link 引入的样式权重大于@import 引入的样式。")])])]),t._v(" "),a("h2",{attrs:{id:"css选择器优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css选择器优先级"}},[t._v("#")]),t._v(" CSS选择器优先级")]),t._v(" "),a("p",[t._v("选择器按优先级先后排列：!important>内联>id>class = 属性 = 伪类 >标签 = 伪元素 > 通配符 *")]),t._v(" "),a("h3",{attrs:{id:"css动画"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css动画"}},[t._v("#")]),t._v(" CSS动画")]),t._v(" "),a("p",[a("strong",[t._v("Transition")])]),t._v(" "),a("p",[t._v("​\ttransition关注的是CSSproperty的变化，property值和时间的关系是一个三次贝塞尔曲线cubic-bezier(n,n,n,n)。")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[t._v("transition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" width 2s linear 0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("transition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" width 2s "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cubic-bezier")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*属性 持续时间 速度效果 延迟*/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*多个动画用,隔开 可以用all代表全部属性*/")]),t._v("\n")])])]),a("p",[a("strong",[t._v("Animation")])]),t._v(" "),a("p",[t._v("​\tanimation作用于元素本身而不是样式属性，可以使用关键帧的概念，应该说可以实现更自由的动画效果。")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".box")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("animation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" animation1 2s ease 0s infinite alternate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 动画名 持续时间 速度效果 延迟 次数 是否反向 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token atrule"}},[a("span",{pre:!0,attrs:{class:"token rule"}},[t._v("@keyframes")]),t._v(" animation1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("background")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" red"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("to")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("background")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" cyan"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"sass-less的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sass-less的作用"}},[t._v("#")]),t._v(" sass less的作用")]),t._v(" "),a("p",[t._v("CSS 是一门非程序式语言，没有变量、函数、SCOPE（作用域），需要书写大量看似没有逻辑的代码，不方便维护及扩展，不利于复用。")]),t._v(" "),a("p",[t._v("Sass(Syntactically Awesome Style Sheets)是对CSS的语法的一种扩充，诞生于2007年，最早也是最成熟的一款"),a("strong",[t._v("CSS预处理器语言")]),t._v("，它可以使用变量、常量、嵌套、混入、函数等功能，可以更有效有弹性的写出CSS。")]),t._v(" "),a("p",[t._v("Sass是Ruby语言写的，需要先安装Ruby，比较繁琐。")]),t._v(" "),a("p",[t._v("Less是也是CSS预处理器语言，可以在客户端或服务器端运行，帮助我们自定义，管理和重用网页的样式表，开源，不需要装Ruby。")]),t._v(" "),a("h3",{attrs:{id:"css实现一个三角形"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css实现一个三角形"}},[t._v("#")]),t._v(" css实现一个三角形")]),t._v(" "),a("p",[t._v("利用border即可实现。")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("height")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("border-top")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 50px solid #00ff00"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("border-left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 50px solid transparent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("border-right")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 50px solid transparent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("border-bottom")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 50px solid transparent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"清除浮动的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清除浮动的方式"}},[t._v("#")]),t._v(" 清除浮动的方式")]),t._v(" "),a("p",[t._v("利用伪元素选择器，在需要清除浮动的元素后方动态插入一个元素来实现。")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".warp::after")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" block"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("height")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("clear")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" both"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("overflow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" hidden"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("visibility")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" hidden"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"css精灵图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css精灵图"}},[t._v("#")]),t._v(" CSS精灵图")]),t._v(" "),a("p",[t._v("将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的background-image，background-repeat，background-position的组合进行背景定位。\n利用CSSSprites能很好地减少网页的http请求，从而很好的提高页面的性能；CSSSprites能减少图片的字节。")]),t._v(" "),a("p",[t._v("优点：\n减少HTTP请求数，极大地提高页面加载速度\n增加图片信息重复度，提高压缩比，减少图片大小\n更换风格方便，只需在一张或几张图片上修改颜色或样式即可实现")]),t._v(" "),a("p",[t._v("缺点：\n图片合并麻烦\n维护麻烦，修改一个图片可能需要重新布局整个图片，样式")]),t._v(" "),a("h3",{attrs:{id:"rem和rpx有什么区别-为什么用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rem和rpx有什么区别-为什么用"}},[t._v("#")]),t._v(" rem和rpx有什么区别？为什么用？")]),t._v(" "),a("p",[t._v("em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸（16px）。 em特点\nem的值并不是固定的；\nem会继承父级元素的字体大小。")]),t._v(" "),a("p",[t._v("rem是CSS3新增的一个相对单位（root em，根em），这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。(IE9以下不支持)")]),t._v(" "),a("p",[t._v("rpx 为小程序中使用的相对单位，用法和rem类似， 1rpx = 屏幕宽度/750 px, 所以在屏幕宽度为750的设计稿中，1rpx = 1px。")]),t._v(" "),a("h3",{attrs:{id:"display-inline-block-有缝隙-怎么解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#display-inline-block-有缝隙-怎么解决"}},[t._v("#")]),t._v(" display：inline-block 有缝隙，怎么解决？")]),t._v(" "),a("p",[t._v("这个是由于换行符决定的，解决：")]),t._v(" "),a("p",[t._v("1.元素之间不换行 "),a("code",[t._v("<span>1</span><span>2</span>")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("使用flex布局")])]),t._v(" "),a("h3",{attrs:{id:"有哪些布局方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有哪些布局方式"}},[t._v("#")]),t._v(" 有哪些布局方式？")]),t._v(" "),a("p",[t._v("文档流浮动布局，定位布局，"),a("code",[t._v("flex")]),t._v("布局 "),a("code",[t._v("Grid")]),t._v("布局")]),t._v(" "),a("p",[t._v("圣杯布局和双飞翼布局")]),t._v(" "),a("h2",{attrs:{id:"浏览器兼容问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器兼容问题"}},[t._v("#")]),t._v(" 浏览器兼容问题")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("IE6识别_   _background-color:#1e0bd1;\nie6,7识别*+# +background-color:#a200ff;\nie8识别\\0 \nie9识别在属性后\\9\\0 .background-color:#00deff\\9;\n")])])]),a("h2",{attrs:{id:"z-index是什么-默认值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#z-index是什么-默认值"}},[t._v("#")]),t._v(" z-index是什么？默认值？")]),t._v(" "),a("p",[t._v("z-index 属性设置元素的堆叠顺序，且只在属性position: relative/absolute/fixed 的时候才生效。 "),a("code",[t._v("z-index: auto")]),t._v(" 是默认值，与"),a("code",[t._v("z-index: 0")]),t._v("是有区别的： "),a("code",[t._v("z-index: 0")]),t._v(" 会创建一个新的堆叠上下文，而 "),a("code",[t._v("z-index: auto")]),t._v(" 不会创建新的堆叠上下文")])])}),[],!1,null,null,null);s.default=r.exports}}]);